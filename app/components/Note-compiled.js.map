{"version":3,"sources":["Note.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAEqB,IAAI;cAAJ,IAAI;;AACrB,aADiB,IAAI,CACT,KAAK,EAAE;8BADF,IAAI;;;;2EAAJ,IAAI,aAEX,KAAK;;cAaf,UAAU,GAAG,YAAM;;AAEf,mBAAO,yCAAO,IAAI,EAAC,MAAM;AACX,yBAAS,EAAE,IAAI,AAAC;AAChB,2BAAW,EAAE,MAAK,KAAK,CAAC,IAAI,AAAC;AAC7B,sBAAM,EAAE,MAAK,UAAU,AAAC;AACxB,0BAAU,EAAE,MAAK,UAAU,AAAC,GAAG,CAAC;SACjD;;cACD,YAAY,GAAG,YAAM;AACjB,mBAAO;;kBAAQ,SAAS,EAAC,aAAa,EAAC,OAAO,EAAE,MAAK,KAAK,CAAC,QAAQ,AAAC;;aAAW,CAAC;SACnF;;cACD,UAAU,GAAG,YAAM;AACf,gBAAM,QAAQ,GAAG,MAAK,KAAK,CAAC,QAAQ,CAAC;AACrC,mBACI;;kBAAK,OAAO,EAAE,MAAK,IAAI,AAAC;gBACpB;;sBAAM,SAAS,EAAC,MAAM;oBAAE,MAAK,KAAK,CAAC,IAAI;iBAAQ;gBAC9C,QAAQ,GAAG,MAAK,YAAY,EAAE,GAAG,IAAI;aACpC,CACR;SACL;;cACD,IAAI,GAAG,YAAM;;AAET,kBAAK,QAAQ,CAAC;AACV,uBAAO,EAAE,IAAI;aAChB,CAAC,CAAC;SACN;;cACD,UAAU,GAAG,UAAC,CAAC,EAAK;;AAEhB,gBAAI,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE;AACnB,sBAAK,UAAU,CAAC,CAAC,CAAC,CAAC;aACtB;SACJ;;cACD,UAAU,GAAG,UAAC,CAAC,EAAK;AAChB,gBAAG,MAAK,KAAK,CAAC,MAAM,EAAE;AAClB,sBAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACrC;;AAAA,AAED,kBAAK,QAAQ,CAAC;AACV,uBAAO,EAAE,KAAK;aACjB,CAAC,CAAC;SACN;;AAnDG,cAAK,KAAK,GAAG;AACT,mBAAO,EAAE,KAAK;SACjB,CAAC;;KACL;;iBAPgB,IAAI;;iCAQZ;;AAEL,gBAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;AACnB,uBAAO,IAAI,CAAC,UAAU,EAAE,CAAC;aAC5B;AACD,mBAAO,IAAI,CAAC,UAAU,EAAE,CAAC;SAC5B;;;WAdgB,IAAI;GAAS,gBAAM,SAAS;;kBAA5B,IAAI","file":"Note-compiled.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Note extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Track `editing` state.\r\n        this.state = {\r\n            editing: false\r\n        };\r\n    }\r\n    render() {\r\n        // Render the component differently based on state.\r\n        if(this.state.editing) {\r\n            return this.renderEdit();\r\n        }\r\n        return this.renderNote();\r\n    }\r\n    renderEdit = () => {\r\n        // Deal with blur and input handlers. These map to DOM events.\r\n        return <input type=\"text\"\r\n                      autoFocus={true}\r\n                      placeholder={this.props.task}\r\n                      onBlur={this.finishEdit}\r\n                      onKeyPress={this.checkEnter} />;\r\n    };\r\n    renderDelete = () => {\r\n        return <button className=\"delete-note\" onClick={this.props.onDelete}>x</button>;\r\n    };\r\n    renderNote = () => {\r\n        const onDelete = this.props.onDelete;\r\n        return (\r\n            <div onClick={this.edit}>\r\n                <span className=\"task\">{this.props.task}</span>\r\n                {onDelete ? this.renderDelete() : null }\r\n            </div>\r\n        );\r\n    };\r\n    edit = () => {\r\n        // Enter edit mode.\r\n        this.setState({\r\n            editing: true\r\n        });\r\n    };\r\n    checkEnter = (e) => {\r\n        // The user hit *enter*, let's finish up.\r\n        if (e.key === 'Enter') {\r\n            this.finishEdit(e);\r\n        }\r\n    };\r\n    finishEdit = (e) => {\r\n        if(this.props.onEdit) {\r\n            this.props.onEdit(e.target.value);\r\n        }\r\n        // Exit edit mode.\r\n        this.setState({\r\n            editing: false\r\n        });\r\n    };\r\n}"]}